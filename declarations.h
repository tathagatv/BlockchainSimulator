#ifndef DECLARATIONS_H
#define DECLARATIONS_H

#include "headers.h"
using namespace std;

extern mt19937 rng;
extern mt19937_64 rng64;
#define random_shuffle(v) shuffle((v).begin(), (v).end(), rng);
// Use mt19937_64 for 64 bit random numbers.

// constants
#define TRANSACTION_SIZE 1 // 1 KB
#define START_TIME 0

// Forward declarations
class Transaction; 
class Block; 
class Blockchain; 
class Link; 
class Event; 
class SendTransaction; 
class ReceiveTransaction; 
class BroadcastTransaction; 
class ReceiveBlock; 
class ForwardBlock; 
class BroadcastMinedBlock; 
class Peer; 
class Simulator; 

// ======================================================================= //
class Transaction {
public:
	static int counter;
	// units = KB
	int id, amount;
	int senderId, receiverId;
	Transaction(int a, int b, int coins);
};

// ======================================================================= //
class Block {
public:
	static int max_size;
	static int counter;
	// units = KB
	int size, id, depth;
	vector<Transaction*> txns;
	vector<Block*> next;
	Block* parent;
};

// ======================================================================= //
class Blockchain {
public:
	Block* genesis;
	Blockchain();
	void add(Block* parent, Block* b);
};

// ======================================================================= //
class Link {
public:
	default_random_engine generator;
	exponential_distribution<ld> exp;
	ld ro, c;
	Peer* peer;
	Link(Peer* p, bool is_fast);
	ld get_delay(int length);
};

// ======================================================================= //
class Event {
public:
	ld timestamp;
	virtual void run(Simulator* sim);
	bool operator<(const Event& other);
	Event(ld timestamp_);
};

// ======================================================================= //
class SendTransaction : public Event {
public:
	int peer_id;
	void run(Simulator* sim);
	SendTransaction(ld timestamp, int peer_id);
};

// ======================================================================= //
class ReceiveTransaction : public Event {
public: 
	Peer* peer; // peer who receives the transaction
	Transaction* txn; // transaction
	void run(Simulator* sim);
	ReceiveTransaction(ld timestamp, Peer* peer, Transaction* txn);
};

// ======================================================================= //
class BroadcastTransaction : public Event {
	void run(Simulator* sim);
};

// ======================================================================= //
class ReceiveBlock : public Event {
	void run(Simulator* sim);
};

// ======================================================================= //
class ForwardBlock : public Event {
	void run(Simulator* sim);
};

// ======================================================================= //
class BroadcastMinedBlock : public Event {
	void run(Simulator* sim);
};

// ======================================================================= //
class Peer {
public:
	static int counter;
	static int total_peers;
	static ld Ttx; // Ttx: mean interarrival time b/n txns generated by peer

	exponential_distribution<ld> exp_dist_time;
	uniform_int_distribution<int> unif_dist_peer;
	int id;
	bool is_fast;
	vector<int> balances;
	vector<Link> adj;

	Peer();
	static void add_edge(Peer* a, Peer* b);
	set<Event*> generate_transaction(ld cur_time); // generate transaction for this peer
	set<Event*> send_transaction(ld cur_time); 
};

// ====================================================================== //
struct EventPtrComp{
	bool operator()(const Event* lhs, const Event* rhs) const;
};

// ======================================================================= //
class Simulator {
public:
	int n, slow_peers, edges;
	ld Tk, Ttx;
	Simulator(int n, ld z);	
	set<Event*, EventPtrComp> events;
	vector<Peer> peers;

	void get_new_peers();
	void form_random_network();
	void init_events();
	void run(ld end_time);
};

#endif
